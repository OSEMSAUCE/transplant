generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Projects {
  projectId           String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectName         String                @unique(map: "unique_project_name")
  projectNotes        String?
  createdAt           DateTime?             @default(now()) @db.Timestamptz(6)
  lastEditedAt        DateTime?             @default(now()) @db.Timestamptz(6)
  editedBy            String?               @db.Uuid
  deleted             Boolean?              @default(false)
  csvobjId            String?               @db.Uuid
  source              String?
  Crop                Crop[]
  Land                Land[]
  ProjectStakeholders ProjectStakeholders[]
  csvobj              Csvobj?               @relation(fields: [csvobjId], references: [csvobjId], onUpdate: NoAction)

  @@map("Projects")
}

model Land {
  landId           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  landName         String
  projectId        String?            @db.Uuid
  hectares         Decimal?           @db.Decimal
  landHolder       String?
  gpsLat           Decimal?           @db.Decimal
  gpsLon           Decimal?           @db.Decimal
  landNotes        String?
  createdAt        DateTime?          @default(now()) @db.Timestamptz(6)
  lastEditedAt     DateTime?          @default(now()) @db.Timestamptz(6)
  editedBy         String?            @db.Uuid
  deleted          Boolean?           @default(false)
  preparation      Preparation?
  csvobjId         String?            @db.Uuid
  polygon          Json?
  csvobj           Csvobj?            @relation(fields: [csvobjId], references: [csvobjId], onUpdate: NoAction)
  Projects         Projects?          @relation(fields: [projectId], references: [projectId], onDelete: NoAction, onUpdate: NoAction)
  LandStakeholders LandStakeholders[]
  Planting         Planting[]

  @@unique([projectId, landName], map: "unique_land_name_per_project_constraint")
  @@index([projectId], map: "idx_land_project_id")
  @@map("Land")
}

model Crop {
  cropId           String             @id(map: "Trees_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cropName         String
  speciesId        String?            @db.Uuid
  seedInfo         String?
  cropStock        String?
  createdAt        DateTime?          @default(now()) @db.Timestamptz(6)
  lastEditedAt     DateTime?          @default(now()) @db.Timestamptz(6)
  editedBy         String?            @db.Uuid
  deleted          Boolean?           @default(false)
  projectId        String?            @db.Uuid
  organizationId   String?            @db.Uuid
  cropNotes        String?
  csvobjId         String?            @db.Uuid
  csvobj           Csvobj?            @relation(fields: [csvobjId], references: [csvobjId], onUpdate: NoAction)
  Organizations    Organizations?     @relation(fields: [organizationId], references: [organizationId], onDelete: NoAction, onUpdate: NoAction)
  Projects         Projects?          @relation(fields: [projectId], references: [projectId], onDelete: NoAction, onUpdate: NoAction)
  Species          Species?           @relation(fields: [speciesId], references: [speciesId], onDelete: NoAction, onUpdate: NoAction)
  CropStakeholders CropStakeholders[]
  Planting         Planting[]

  @@unique([projectId, cropName], map: "unique_crop_name_per_project")
  @@index([organizationId], map: "idx_crop_organization_id")
  @@index([projectId], map: "idx_crop_project_id")
  @@map("Crop")
}

model Planting {
  plantingId    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  landId        String?   @db.Uuid
  planted       Int?
  plantingDate  DateTime? @db.Date
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  lastEditedAt  DateTime? @default(now()) @db.Timestamptz(6)
  deleted       Boolean?  @default(false)
  cropId        String?   @db.Uuid
  plantingNotes String?
  Crop          Crop?     @relation(fields: [cropId], references: [cropId], onDelete: NoAction, onUpdate: NoAction)
  Land          Land?     @relation(fields: [landId], references: [landId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([landId, cropId], map: "unique_land_crop")
  @@index([cropId], map: "idx_planting_crop_id")
  @@map("Planting")
}

model Organizations {
  organizationId      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationName    String                @unique(map: "unique_organization_name")
  contactName         String?
  contactEmail        String?
  contactPhone        String?
  address             String?
  website             String?
  organizationNotes   String?
  createdAt           DateTime?             @default(now()) @db.Timestamptz(6)
  lastEditedAt        DateTime?             @default(now()) @db.Timestamptz(6)
  editedBy            String?               @db.Uuid
  deleted             Boolean?              @default(false)
  gpsLat              Float?
  gpsLon              Float?
  stakeholderTypeId   String?               @db.Uuid
  Crop                Crop[]
  CropStakeholders    CropStakeholders[]
  LandStakeholders    LandStakeholders[]
  StakeholderTypes    StakeholderTypes?     @relation(fields: [stakeholderTypeId], references: [stakeholderTypeId], onUpdate: NoAction, map: "fk_organizations_stakeholdertypeid")
  ProjectStakeholders ProjectStakeholders[]

  @@map("Organizations")
}

model Species {
  speciesId      String    @id @db.Uuid
  commonName     String    @unique(map: "unique_common_name")
  scientificName String?
  type           String?
  family         String?
  reference      String?
  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  lastEditedAt   DateTime? @default(now()) @db.Timestamptz(6)
  editedBy       String?   @db.Uuid
  deleted        Boolean?  @default(false)
  Crop           Crop[]

  @@map("Species")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model StakeholderTypes {
  stakeholderType     String
  createdAt           DateTime?             @default(now()) @db.Timestamptz(6)
  lastEditedAt        DateTime?             @default(now()) @db.Timestamptz(6)
  deleted             Boolean?              @default(false)
  stakeholderTypeId   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  CropStakeholders    CropStakeholders[]
  LandStakeholders    LandStakeholders[]
  Organizations       Organizations[]
  ProjectStakeholders ProjectStakeholders[]

  @@map("StakeholderTypes")
}

model Csvobj {
  csvobjId  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  jsonData  Json
  createdAt DateTime?  @default(now()) @db.Timestamp(6)
  Crop      Crop[]
  Land      Land[]
  Projects  Projects[]
  metadata  Metadata[]

  @@map("csvobj")
}

model Metadata {
  metadataId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  csvobjId   String    @db.Uuid
  csvKey     String
  dbKey      String
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  csvobj     Csvobj    @relation(fields: [csvobjId], references: [csvobjId], onDelete: Cascade, onUpdate: NoAction)

  @@map("metadata")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Nursery {
  nurseryId    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gpsLat       Float
  gpsLon       Float
  capacity     Int
  nurseryNotes String?
  tradeName    String
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  createdBy    String    @db.Uuid
  lastEditedAt DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CropStakeholders {
  cropStakeholderId String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cropId            String           @db.Uuid
  organizationId    String           @db.Uuid
  stakeholderTypeId String           @db.Uuid
  Crop              Crop             @relation(fields: [cropId], references: [cropId], onDelete: Cascade, onUpdate: NoAction, map: "fk_cropstakeholders_cropid")
  Organizations     Organizations    @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade, onUpdate: NoAction, map: "fk_cropstakeholders_organizationid")
  StakeholderTypes  StakeholderTypes @relation(fields: [stakeholderTypeId], references: [stakeholderTypeId], onDelete: Cascade, onUpdate: NoAction, map: "fk_cropstakeholders_stakeholdertypeid")

  @@unique([cropId, organizationId, stakeholderTypeId], map: "unique_crop_org_type")
  @@index([cropId], map: "idx_crop_stakeholders_cropid")
  @@index([organizationId], map: "idx_crop_stakeholders_organizationid")
  @@index([stakeholderTypeId], map: "idx_crop_stakeholders_stakeholdertypeid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LandStakeholders {
  landStakeholderId String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  landId            String           @db.Uuid
  organizationId    String           @db.Uuid
  stakeholderTypeId String           @db.Uuid
  Land              Land             @relation(fields: [landId], references: [landId], onDelete: Cascade, onUpdate: NoAction, map: "fk_landstakeholders_landid")
  Organizations     Organizations    @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade, onUpdate: NoAction, map: "fk_landstakeholders_organizationid")
  StakeholderTypes  StakeholderTypes @relation(fields: [stakeholderTypeId], references: [stakeholderTypeId], onDelete: Cascade, onUpdate: NoAction, map: "fk_landstakeholders_stakeholdertypeid")

  @@unique([landId, organizationId, stakeholderTypeId], map: "unique_land_org_type")
  @@index([landId], map: "idx_land_stakeholders_landid")
  @@index([organizationId], map: "idx_land_stakeholders_organizationid")
  @@index([stakeholderTypeId], map: "idx_land_stakeholders_stakeholdertypeid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectStakeholders {
  stakeholderId     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId    String           @db.Uuid
  stakeholderTypeId String           @db.Uuid
  projectId         String           @db.Uuid
  Organizations     Organizations    @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade, onUpdate: NoAction, map: "fk_projectstakeholders_organizationid")
  Projects          Projects         @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: NoAction, map: "fk_projectstakeholders_projectid")
  StakeholderTypes  StakeholderTypes @relation(fields: [stakeholderTypeId], references: [stakeholderTypeId], onDelete: Cascade, onUpdate: NoAction, map: "fk_projectstakeholders_stakeholdertypeid")

  @@unique([organizationId, stakeholderTypeId, projectId], map: "unique_org_type_project")
  @@index([organizationId], map: "idx_organizationid")
  @@index([projectId], map: "idx_projectid")
  @@index([stakeholderTypeId], map: "idx_stakeholdertypeid")
}

enum Preparation {
  raw
  mechanical
  chemical
  burned
  grass_seed @map("grass seed")
  landscaped
}
