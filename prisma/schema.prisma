// This is your Prisma schema file
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for preparation types
enum Preparation {
  raw
  mechanical
  chemical
  burned
  grass_seed
  landscaped
}

// Project model
model Projects {
  projectId    String   @id @default(uuid()) @map("project_id")
  projectName  String?  @map("project_name")
  projectNotes String?  @map("project_notes")
  createdAt    DateTime @default(now()) @map("created_at")
  lastEditedAt DateTime @default(now()) @map("last_edited_at")
  editedBy     String?  @map("edited_by") @db.Uuid
  deleted      Boolean  @default(false)
  csvobjId     String?  @map("csvobj_id") @db.Uuid

  // Relations
  lands      Land[]
  crops      Crop[]
  csvobj     Csvobj?    @relation(fields: [csvobjId], references: [csvobjId], onDelete: SetNull)
  stakeholders Stakeholders[]

  @@map("Projects")
}

// Land model
model Land {
  landId        String      @id @default(uuid()) @map("land_id")
  landName      String?     @map("land_name")
  projectId     String?     @map("project_id") @db.Uuid
  hectares      Decimal?
  landHolder    String?     @map("land_holder")
  polygonId     String?     @map("polygon_id") @db.Uuid
  gpsLat        Decimal?    @map("gps_lat")
  gpsLon        Decimal?    @map("gps_lon")
  landNotes     String?     @map("land_notes")
  createdAt     DateTime    @default(now()) @map("created_at")
  lastEditedAt  DateTime    @default(now()) @map("last_edited_at")
  editedBy      String?     @map("edited_by") @db.Uuid
  deleted       Boolean     @default(false)
  preparation   Preparation?
  preparationId BigInt?     @map("preparation_id") @db.BigInt
  csvobjId      String?     @map("csvobj_id") @db.Uuid

  // Relations
  project         Projects?          @relation(fields: [projectId], references: [projectId])
  polygon         Polygons?          @relation(fields: [polygonId], references: [polygonId])
  preparationType PreparationTypes?  @relation(fields: [preparationId], references: [preparationId])
  csvobj          Csvobj?            @relation(fields: [csvobjId], references: [csvobjId], onDelete: SetNull)
  plantings       Planting[]

  @@map("Land")
}

// Crop model
model Crop {
  cropId         String    @id @default(uuid()) @map("crop_id")
  cropName       String?   @map("crop_name")
  speciesId      String?   @map("species_id") @db.Uuid
  seedlot        String?
  seedzone       String?
  cropStock      String?   @map("crop_stock")
  createdAt      DateTime  @default(now()) @map("created_at")
  lastEditedAt   DateTime  @default(now()) @map("last_edited_at")
  editedBy       String?   @map("edited_by") @db.Uuid
  deleted        Boolean   @default(false)
  projectId      String?   @map("project_id") @db.Uuid
  organizationId String?   @map("organization_id") @db.Uuid
  cropNotes      String?   @map("crop_notes")
  csvobjId       String?   @map("csvobj_id") @db.Uuid

  // Relations
  species      Species?       @relation(fields: [speciesId], references: [speciesId])
  project      Projects?      @relation(fields: [projectId], references: [projectId])
  organization Organizations? @relation(fields: [organizationId], references: [organizationId])
  csvobj       Csvobj?        @relation(fields: [csvobjId], references: [csvobjId], onDelete: SetNull)
  plantings    Planting[]

  @@map("Crop")
}

// Planting model
model Planting {
  plantingId    String    @id @default(uuid()) @map("planting_id")
  landId        String?   @map("land_id") @db.Uuid
  cropId        String?   @map("crop_id") @db.Uuid
  planted       Int?
  plantingDate  DateTime? @map("planting_date")
  createdAt     DateTime  @default(now()) @map("created_at")
  lastEditedAt  DateTime  @default(now()) @map("last_edited_at")
  editedBy      String?   @map("edited_by") @db.Uuid
  deleted       Boolean   @default(false)
  planting_notes String?
  csvobjId      String?   @map("csvobj_id") @db.Uuid

  // Relations
  land    Land?   @relation(fields: [landId], references: [landId])
  crop    Crop?   @relation(fields: [cropId], references: [cropId])
  csvobj  Csvobj? @relation(fields: [csvobjId], references: [csvobjId], onDelete: SetNull)

  @@map("Planting")
}

// Polygons model
model Polygons {
  polygonId  String    @id @default(uuid()) @map("polygon_id")
  geojson    Json?
  polyNotes  String?   @map("poly_notes")
  createdAt  DateTime  @default(now()) @map("created_at")
  lastEditedAt DateTime @default(now()) @map("last_edited_at")
  editedBy   String?   @map("edited_by") @db.Uuid
  deleted    Boolean   @default(false)
  csvobjId   String?   @map("csvobj_id") @db.Uuid

  // Relations
  lands     Land[]
  csvobj    Csvobj?   @relation(fields: [csvobjId], references: [csvobjId], onDelete: SetNull)

  @@map("Polygons")
}

// Organizations model
model Organizations {
  organizationId    String   @id @default(uuid()) @map("organization_id")
  organizationName  String?  @map("organization_name")
  contactName       String?  @map("contact_name")
  contactEmail      String?  @map("contact_email")
  contactPhone      String?  @map("contact_phone")
  address           String?
  website           String?
  organizationNotes String?  @map("organization_notes")
  createdAt         DateTime @default(now()) @map("created_at")
  lastEditedAt      DateTime @default(now()) @map("last_edited_at")
  editedBy          String?  @map("edited_by") @db.Uuid
  deleted           Boolean  @default(false)
  isNursery         Boolean  @default(false) @map("is_nursery")
  gpsLat            Float?   @map("gps_lat")
  gpsLon            Float?   @map("gps_lon")

  // Relations
  crops        Crop[]
  stakeholders Stakeholders[]

  @@map("Organizations")
}

// Species model
model Species {
  speciesId      String   @id @default(uuid()) @map("species_id")
  commonName     String?  @map("common_name")
  scientificName String?  @map("scientific_name")
  type           String?
  family         String?
  reference      String?
  createdAt      DateTime @default(now()) @map("created_at")
  lastEditedAt   DateTime @default(now()) @map("last_edited_at")
  editedBy       String?  @map("edited_by") @db.Uuid
  deleted        Boolean  @default(false)

  // Relations
  crops Crop[]

  @@map("Species")
}

// PreparationTypes model
model PreparationTypes {
  preparationId BigInt   @id @default(autoincrement()) @map("preparation_id") @db.BigInt
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  lastEditedAt  DateTime @default(now()) @map("last_edited_at")
  deleted       Boolean  @default(false)

  // Relations
  lands Land[]

  @@map("PreparationTypes")
}

// Stakeholders model
model Stakeholders {
  stakeholderId     String   @id @default(uuid()) @map("stakeholder_id")
  projectId         String?  @map("project_id") @db.Uuid
  organizationId    String?  @map("organization_id") @db.Uuid
  stakeholderTypeId String?  @map("stakeholder_type_id") @db.Uuid
  contributionAmount Decimal? @map("contribution_amount")
  stakeNotes        String?  @map("stake_notes")
  createdAt         DateTime @default(now()) @map("created_at")
  lastEditedAt      DateTime @default(now()) @map("last_edited_at")
  deleted           Boolean  @default(false)

  // Relations
  project         Projects?        @relation(fields: [projectId], references: [projectId])
  organization    Organizations?   @relation(fields: [organizationId], references: [organizationId])
  stakeholderType StakeholderTypes? @relation(fields: [stakeholderTypeId], references: [stakeholderTypeId])

  @@map("Stakeholders")
}

// StakeholderTypes model
model StakeholderTypes {
  stakeholderTypeId   String   @id @default(uuid()) @map("stakeholder_type_id")
  stakeholderTypeName String?  @map("stakeholder_type_name")
  createdAt           DateTime @default(now()) @map("created_at")
  lastEditedAt        DateTime @default(now()) @map("last_edited_at")
  deleted             Boolean  @default(false)

  // Relations
  stakeholders Stakeholders[]

  @@map("StakeholderTypes")
}

// Csvobj model
model Csvobj {
  csvobjId  String   @id @default(uuid()) @map("csvobj_id")
  jsonData  Json     @map("json_data")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  projects  Projects[]
  lands     Land[]
  crops     Crop[]
  plantings Planting[]
  polygons  Polygons[]
  metadata  Metadata[]

  @@map("csvobj")
}

// Metadata model
model Metadata {
  metadataId String   @id @default(uuid()) @map("metadata_id")
  csvobjId   String   @map("csvobj_id") @db.Uuid
  csvKey     String   @map("csv_key")
  dbKey      String   @map("db_key")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  csvobj Csvobj @relation(fields: [csvobjId], references: [csvobjId], onDelete: Cascade)

  @@map("metadata")
}